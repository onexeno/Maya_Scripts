string $selCurve[] = `ls -sl -dag -s`;

// U can only use nurbsCurve node to create Node;





if(size($selCurve)!=1 || `nodeType $selCurve[0]`!="nurbsCurve")
{
    warning "Please select a nurbsCurve !!! ";
}
else
{
    //string $emitter = `emitter -type curve -r 10000 -sro 0 -nuv 0 -cye none -cyi 1 -spd 0 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0`;
    string $emitter = `createNode -n ($selCurve[0]+"_Emitter") "pointEmitter"`;
    //vector $selCurve[0]Pos = `getAttr ($selCurve[0]+".center")`;
    //xform -ws -t ($selCurve[0]Pos.x) ($selCurve[0]Pos.y) ($selCurve[0]Pos.z) $emitter;
    setAttr ($emitter+".emitterType") 3;
    setAttr ($emitter+".scaleRateByObjectSize") 0;
    setAttr ($emitter+".scaleRateBySpeed") 0;
    setAttr ($emitter+".minDistance") 0;
    setAttr ($emitter+".maxDistance") 0;
    setAttr ($emitter+".speed") 0;
    setAttr ($emitter+".speedRandom") 0;

    string $geoConnector = `createNode -n ($selCurve[0]+"_geoConnector") "geoConnector"`;
    string $particleNode = `createNode -n ($selCurve[0]+"_Particle") "particle"`;
    

    setAttr ($particleNode + ".maxCount") 600;
    setAttr ($emitter + ".rate") 999999;

    connectAttr -f ("time1.outTime") ($emitter+".currentTime");
    connectAttr -f ("time1.outTime") ($particleNode+".currentTime");
    connectAttr -f ("time1.outTime") ($geoConnector+".currentTime");

    connectAttr -f ($emitter+".output[0]")  ($particleNode+".newParticles[0]");

    connectAttr -f ($selCurve[0]+".message") ($geoConnector+".owner");
    connectAttr -f ($selCurve[0]+".local") ($geoConnector+".localGeometry");
    connectAttr -f ($selCurve[0]+".worldMatrix") ($geoConnector+".worldMatrix");

    connectAttr -f ($geoConnector+".ownerCentroid") ($emitter+".ownerCentroid");
    connectAttr -f ($geoConnector+".ownerCentroidLocal") ($emitter+".translate");
    connectAttr -f ($geoConnector+".ownerPositions") ($emitter+".ownerPosData");
    connectAttr -f ($geoConnector+".ownerVelocities") ($emitter+".ownerVelData");
    connectAttr -f ($geoConnector+".sweptGeometry") ($emitter+".sweptGeometry");
    
    connectAttr -f ($particleNode+".inheritFactor") ($emitter+".inheritFactor[0]");
    connectAttr -f ($particleNode+".isFull") ($emitter+".isFull[0]");
    connectAttr -f ($particleNode+".seed[0]") ($emitter+".seed[0]");
    connectAttr -f ($particleNode+".startTime") ($emitter+".startTime[0]");
    connectAttr -f ($particleNode+".timeStepSize") ($emitter+".deltaTime[0]");

    connectAttr -f ($selCurve[0]+".worldSpace[0]") ($particleNode+".goalGeometry[0]");

    setAttr ($particleNode+".goalWeight[0]") 1;

    catchQuiet(`parent $emitter $selCurve[0]`);

    //addAttr to particle;
    addAttr -ln goalU -dt doubleArray $particleNode;
    addAttr -ln goalU00 -dt doubleArray $particleNode;
    
    addAttr -ln scale_Ramp1 -dt doubleArray $particleNode;
    addAttr -ln scale_Ramp100 -dt doubleArray $particleNode;
    
    addAttr -ln scale_Ramp2 -dt doubleArray $particleNode;
    addAttr -ln scale_Ramp200 -dt doubleArray $particleNode;
    
    addAttr -ln scale_Ramp3 -dt doubleArray $particleNode;
    addAttr -ln scale_Ramp300 -dt doubleArray $particleNode;
    
    addAttr -ln goal_Run_Ramp1 -dt doubleArray $particleNode;
    addAttr -ln goal_Run_Ramp100 -dt doubleArray $particleNode;
    
    addAttr -ln noiseId -dt doubleArray $particleNode;
    addAttr -ln noiseId00 -dt doubleArray $particleNode;
    
    addAttr -ln radiusPP -dt doubleArray $particleNode;
    addAttr -ln radiusPP00 -dt doubleArray $particleNode;
   
    addAttr -ln radius -at double -dv 0.1 $particleNode;
    setAttr -e -keyable true ($particleNode+".radius");

    addAttr -ln motionTrigger -at bool -dv 0 $particleNode;
    setAttr -e -keyable true ($particleNode+".motionTrigger");

    addAttr -ln motionSpeed_PP -dt doubleArray  $particleNode;
    addAttr -ln motionSpeed_PP00 -dt doubleArray $particleNode; 

    addAttr -ln motionSpeed_Min -at double -dv 0.01 $particleNode;
    setAttr -e -keyable true ($particleNode+".motionSpeed_Min");

    addAttr -ln motionSpeed_Max -at double -dv 0.01 $particleNode;
    setAttr -e -keyable true ($particleNode+".motionSpeed_Max");

    addAttr -ln motionCustom -at bool -dv 0 $particleNode;
    setAttr -e -keyable true ($particleNode+".motionCustom");

    addAttr -ln motionKey -at double -dv 0 $particleNode;
    setAttr -e -keyable true ($particleNode+".motionKey");
    
    addAttr -ln motionCustom_TempU -dt doubleArray $particleNode;
    addAttr -ln motionCustom_TempU00 -dt doubleArray $particleNode;

    addAttr -ln "goal_Offset_Direction" -at double3 $particleNode;
    addAttr -ln "goal_Offset_DirectionX" -at double -p goal_Offset_Direction $particleNode;    
    addAttr -ln "goal_Offset_DirectionY" -at double -p goal_Offset_Direction $particleNode;
    addAttr -ln "goal_Offset_DirectionZ" -at double -p goal_Offset_Direction $particleNode;
    setAttr -type double3 ($particleNode+".goal_Offset_Direction") 0 0 0;
    setAttr -e -keyable true ($particleNode+".goal_Offset_Direction");
    setAttr -e -keyable true ($particleNode+".goal_Offset_DirectionX");
    setAttr -e -keyable true ($particleNode+".goal_Offset_DirectionY");
    setAttr -e -keyable true ($particleNode+".goal_Offset_DirectionZ");
    
    addAttr -ln goalOffset -dt vectorArray $particleNode;
    addAttr -ln goalOffset00 -dt vectorArray $particleNode;
    
    addAttr -ln "goal_Max" -at double -dv 1 -min 0 -max 1 $particleNode;
    setAttr -e -keyable true ($particleNode+".goal_Max");
    addAttr -ln "goal_Min" -at double -dv 0 -min 0 -max 1 $particleNode;
    setAttr -e -keyable true ($particleNode+".goal_Min");
    
       
    setAttr ($particleNode+".particleRenderType") 7;
    
    string $ramp1 = `particleRamp "goalU" "scale_Ramp1" $particleNode 1 4`;
    string $ramp2 = `particleRamp "goalU" "scale_Ramp2" $particleNode 1 4`;
    string $ramp3 = `particleRamp "noiseId" "scale_Ramp3" $particleNode 1 4`;
    string $ramp4 = `particleRamp "goalU" "goal_Run_Ramp1" $particleNode 1 4`; 
       
    //return {$selCurve[0],$particleNode,$emitter};
    string $creationExprString,$rbdExprString;

    $creationExprString =  "noiseId = rand(0,1);\n" +
                     "motionCustom_TempU = rand(goal_Min,goal_Max);\n" +
                     "motionSpeed_PP = rand(motionSpeed_Min,motionSpeed_Max);\n" +
                     "radiusPP = scale_Ramp1 * scale_Ramp2 * scale_Ramp3 * radius;\n" +
                     "if (motionCustom == 1)\n{\n\t" +
                     "goalU = rand(goal_Min,goal_Max) * motionKey;\n}\n" +
                     "else if (motionTrigger == 1)\n{\n\t" +
                     "goalU = 0;\n}\n" +
                     "else{\n\t" +
                     "goalU = rand(goal_Min,goal_Max);\n}\n" + 
                     "goalOffset = radiusPP * <<goal_Offset_DirectionX,goal_Offset_DirectionY,goal_Offset_DirectionZ>>;\n";

    $rbdExprString = "radiusPP = scale_Ramp1 * scale_Ramp2 * scale_Ramp3 * radius;\n"+
                     "if(motionCustom == 1)\n{\n\t" +
                     "goalU = motionCustom_TempU * motionKey;\n}\n" +
                     "else if (motionTrigger == 1)\n{\n\t" +
                     "goalU += motionSpeed_PP * goal_Run_Ramp1 * motionCustom_TempU;\n}\n" +
                     "goalOffset = radiusPP * <<goal_Offset_DirectionX,goal_Offset_DirectionY,goal_Offset_DirectionZ>>;\n";


    dynExpression -s $creationExprString
                     -c $particleNode;
    
    dynExpression -s $rbdExprString
                     -rbd $particleNode;

}



// Create Ramp & Connect it to Particle;
global proc string particleRamp(string $inputAttr,string $outputAttr,string $particle,int $initialize,int $interpolationType)
{
    string $ramp1 = `createNode -n ($particle+"_"+$outputAttr+"_Ramp") "ramp"`;
    string $arrayMapper1 = `createNode -n ($particle+"_"+$outputAttr+"_ArrayMapper") "arrayMapper"`;
    
    
    setAttr ($arrayMapper1+".minValue") 0;
    setAttr ($arrayMapper1+".maxValue") 1;
    
    if($initialize == 1)
    {
        // set ramp interpolation to smooth;
        setAttr ($ramp1+".interpolation") $interpolationType;
        
        //initialize noiseId_Ramp and goalSpeedRamp to max;
        setAttr ($ramp1+".colorEntryList[0].color") -type double3 1 1 1;
        setAttr ($ramp1+".colorEntryList[1].color") -type double3 1 1 1;
        setAttr ($ramp1+".colorEntryList[0].position") 0.0;
        setAttr ($ramp1+".colorEntryList[1].position") 1.0;

    }
    
    connectAttr -f ($ramp1+".outColor") ($arrayMapper1+".computeNodeColor");
    connectAttr -f ($ramp1+".message") ($arrayMapper1+".computeNode");
    connectAttr -f ($particle+"."+$inputAttr) ($arrayMapper1+".vCoordPP");
    connectAttr -f ($arrayMapper1+".outValuePP") ($particle+"."+$outputAttr);

    return $ramp1;
}




// Create VDB from particle module;

global proc string createVDB(string $particle)
{
    if(!`pluginInfo -q -l "BE_OpenVDB"`)
        if(catchQuiet(`loadPlugin -qt "BE_OpenVDB"`))
        {
            warning "You have to install the VDB Plugin";
            return "";
        }
    return obj2Vdb($particle);
}       


proc string particle2Vdb(string $particle)
{

    string $vdbFromParticle = `createNode -ss BE_VDBFromParticles -n ($particle+"_Vdb_FromParticle")`;
    setAttr ($vdbFromParticle+".VoxelSize") 0.1;
    connectAttr ($particle+".position") ($vdbFromParticle+".PointInput");
    if(`attributeQuery -node $particle -ex "radiusPP"`)
    {
        connectAttr ($particle+".radiusPP") ($vdbFromParticle+".PointRadiusInput");     
    }

    return $vdbFromParticle;
}

proc string polygon2Vdb(string $polygon)
{
    string $vdbFromPolygon = `createNode -ss BE_VDBFromPolygons -n ($polygon+"_Vdb_FromPolygon")`;
    setAttr ($vdbFromPolygon+".VoxelSize") 0.1;
    connectAttr ($polygon+".outMesh") ($vdbFromPolygon+".MeshInput");
    setAttr ($polygon+".intermediateObject") 1;
    return $vdbFromPolygon;
}

proc string obj2Vdb(string $obj)
{
    string $vdbFrom;
    string $vdbFilterSDF = `createNode -ss BE_VDBFilterSDF -n ($obj+"_Vdb_FilterSDF")`;
    string $vdbConvert2Mesh = `createNode -ss BE_VDBConvertVDB -n ($obj+"_Vdb_ConvertSDF")`;
    string $vdbMesh = `createNode -ss mesh -n ($obj+"_Vdb_PolyShape")`;

    //setAttr $vdbFilterSDF;
    if(`nodeType $obj` == "particle")
        $vdbFrom = particle2Vdb($obj);
    else if (`nodeType $obj` == "mesh")
        $vdbFrom = polygon2Vdb($obj);
    else
        return "";

    setAttr ($vdbConvert2Mesh+".ConvertTo") 1;
    setAttr ($vdbConvert2Mesh+".InvertNormal") 1;

    connectAttr ($vdbFrom+".VdbOutput") ($vdbFilterSDF+".VdbInput");
    connectAttr ($vdbFilterSDF+".VdbOutput") ($vdbConvert2Mesh+".vdbInput");
    connectAttr ($vdbConvert2Mesh+".meshOutput[0]") ($vdbMesh+".inMesh");
    
    select -r $vdbMesh;
    hyperShade -a "lambert1";
    select -cl;

    return $vdbMesh;
}


