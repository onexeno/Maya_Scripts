global int $attrID,$aovID;
global string $temps[],$aovName[],$nodes[];
global string $idButton;

global proc string padZero(int $number,int $zeroNum)
{
    string $sCount = $zeroNum;
    string $sNumber = $number;
    int $size = $zeroNum - size($sNumber);
    string $formatNum;
    for($i=0;$i<$size;$i++)
    {
        $formatNum += "0";
    }
    $formatNum += $sNumber;
    return $formatNum;
}

global proc createAttr()
{
    global int $attrID,$aovID;
    global string $temps[],$aovName[];
    global string $idButton;
    if($attrID%3==0)
        $aovID++;
        
    string $attrName = "mtoa_constant_id_" + padZero($aovID,3);
    for ($obj in `ls -sl -dag -s -ni -typ "mesh"`)
    {
        if(!`attributeQuery -n $obj -ex $attrName`)
        {
            addAttr -ln $attrName -at double3 $obj;
            addAttr -ln ($attrName+"X") -at double -p ($attrName) $obj;
            addAttr -ln ($attrName+"Y") -at double -p ($attrName) $obj;
            addAttr -ln ($attrName+"Z") -at double -p ($attrName) $obj;
            /*setAttr -e-keyable true ($obj+"."+$attrName);
            setAttr -e-keyable true ($obj+"."+$attrName+"X");
            setAttr -e-keyable true ($obj+"."+$attrName+"Y");
            setAttr -e-keyable true ($obj+"."+$attrName+"Z");*/
        }
        setAttr ($obj+"."+$attrName) ($attrID%3==0?1:0) ($attrID%3==1?1:0) ($attrID%3==2?1:0);

        $temps[size($temps)] = $obj;
        catchQuiet(`setAttr ($obj+".template") 1`);
        //setAttr ($obj+".overrideEnabled") 1;
        //setAttr ($obj+".overrideVisibility") 0;    
    }
    if(`button -q -ex $idButton`)
    {
        button -e -l ("ID_"+padZero($aovID,3)) -bgc (($attrID+0)%3==0?0.5:0) (($attrID+0)%3==1?0.5:0) (($attrID+0)%3==2?0.5:0) $idButton;
    }

    $aovName[size($aovName)] = "id_" + padZero($aovID,3);
    
    $attrID++;    
}

global proc initializeGlobalVars()
{
    global int $attrID,$aovID;
    global string $aovName[],$temps[],$nodes[];
    $attrID = 0;
    $aovID = analyseMaxId();
    $aovName = {};
    $temps = {};
    $nodes = {};
}

global proc setVisibility()
{
    global string $temps[];
    for($i=0;$i<size($temps);$i++)
    {
        //setAttr ($temps[$i]+".template") (!`getAttr ($temps[$i]+".template")`);
        setAttr ($temps[$i]+".template") 0;
        //setAttr ($temps[$i]+".overrideEnabled") (!`getAttr ($temps[$i]+".overrideEnabled")`);
        //setAttr ($temps[$i]+".overrideVisibility") 1;
    }
}

global proc createAOVByGlobal()
{
    global string $aovName[],$nodes[];
    $aovName = stringArrayRemoveDuplicates($aovName);

    if(`currentRenderer` == "arnold")
    {
            for($aov in $aovName)
            {
                if(!`objExists ("aiAOV_"+$aov)`)
                {
                    //python("from mtoa import aovs\n"+"aovs.AOVInterface().addAOV(\'"+$aov+"\',5)");
                    string $node = `createNode -ss "aiAOV" -n ("aiAOV_"+$aov)`;
                    string $audc = `shadingNode -as aiUserDataColor -n ("aiUserDataColor_"+$aov)`;
                    $nodes[size($nodes)] = $node;
                    $nodes[size($nodes)] = $audc;

                    setAttr -type "string" ($node+".name") ($aov);
                    setAttr -type "string" ($audc+".colorAttrName") ($aov);

                    connectAttr -f -na ($node+".message") ("defaultArnoldRenderOptions.aovList");
                    connectAttr -f ("defaultArnoldFilter.message") ($node+".outputs[0].filter");
                    connectAttr -f ("defaultArnoldDriver.message") ($node+".outputs[0].driver");
                    connectAttr -f ($audc+".outColor") ($node+".defaultValue");
                }
            }      
    }

    else
    {
        warning ("Please load \"mtoa!\n");
    }
}

global proc clearNodes()
{
    global string $nodes[];
    global string $idButton;
    if(size($nodes)>0)
    {   
        delete $nodes;
    }
    initializeGlobalVars();
    if(`button -q -ex $idButton`)
    {
        button -e -l ("ID_"+padZero(analyseMaxId(),3)) -bgc 0.375 0.375 0.375 $idButton;
    }
}

global proc int analyseMaxId()
{
    //string $allMeshs[] = `ls -ni -typ "mesh"`;
    string $allAOVs[] = `ls -typ "aiAOV"`;
    int $array[];
    for($aov in $allAOVs)
    {
        string $aovName = `getAttr ($aov+".name")`;
        string $temp[];
        tokenize $aovName "id_" $temp;           
        $array[size($array)] = $temp[size($temp)-1];
    }
    if(size($array)>0)
        {$array = sort($array);
        return $array[size($array)-1];}
    else
        return 0;
}

global proc createAOVWindow()
{
    global int $attrID,$aovID;
    global string $temps[],$aovName[];
    global string $idButton;

    initializeGlobalVars();

    if (`window -ex AIAOVID`)
        deleteUI AIAOVID;
    
    window -t "aiAovID" -w 200 -h 200 AIAOVID;
    columnLayout;
    rowLayout -nc 4;
    
    $idButton = `button -c "createAttr()" -l ("ID_"+padZero($aovID,3)) -bgc 0.375 0.375 0.375 -w 120 -h 40`; //-bgc ($attrID%3==0?1:0) ($attrID%3==1?1:0) ($attrID%3==2?1:0)`;
    button -c "setSelectable()" -l "showObjects" -w 120 -h 40;
  
    button -c "createAOVByGlobal()" -l "CreateAOV" -w 120 -h 40;
    button -c "clearNodes()" -l "Delete Nodes" -w 120 -h 40;
    setParent..;
    string $attribtueParent = `columnLayout`;
    string $option = `optionMenu -l "Select Attrs"`;
       menuItem -l "ai Render";
       menuItem -l "Mesh Render";
       menuItem -l "ai Export";
       menuItem -l "ai Subdiv";
       menuItem -l "ai Displacement";
       menuItem -l "ai Volume";
       menuItem -l "Mesh Display";
    string $optionCommand = "`optionMenu -q -sl " + $option +"`";
    eval("optionMenu -e -cc " + "\"" + "genAttributeLayout(" + "\\" + "\"" + $attribtueParent + "\\"+"\"," +$optionCommand+") " + "\"" + $option);
    showWindow();
}


global proc string [] chooseAttributes(int $index)
{
string $meshAttributes[] = {
							"holdOut" , "Hold-Out" , "boolean", 1, 0,
							"smoothShading" , "Smooth Shading" , "boolean", 1, 0,
							"primaryVisibility" , "Primary Visibility" , "boolean", 1, 1,
							"castsShadows" , "Casts Shadows" , "boolean", 1, 1,
							"receiveShadows" , "Receive Shadows" , "boolean", 1, 1,
							"motionBlur" , "Motion Blur" , "boolean", 1, 1,
							"visibleInReflections" , "Visible In Reflection" , "boolean", 1, 1,
							"visibleInRefractions" , "Visbile In Refraction", "boolean", 1, 1,
							"doubleSided" , "Double Sided" , "boolean", 1, 1,
							"opposite" , "Opposite" , "boolean", 1,0
							};
										
string $aiMeshAttributes[] = {
							"aiOpaque"  , "Opaque" , "boolean", 1, 1,
							"aiMatte" , "Matte" ,"boolean", 1, 0,
							"primaryVisibility" , "Primary Visibility" , "boolean", 1, 1,
							"castsShadows" , "Casts Shadows" ,"boolean", 1, 1,
							"aiVisibleInDiffuseReflection" , "Diffuse Reflection" , "boolean", 1, 1,
							"aiVisibleInSpecularReflection" , "Specular Reflection" , "boolean", 1, 1,
							"aiVisibleInDiffuseTransmission" , "Diffuse Transmission" , "boolean", 1, 1,
							"aiVisibleInSpecularTransmission" , "Specular Transmission" , "boolean", 1, 1,
							"aiVisibleInVolume" , "Volume" , "boolean", 1, 0,
							"aiSelfShadows" , "Self Shadows" , "boolean", 1,1
							};

string $aiExportAttributes[] = {
							"aiExportTangents" , "Export Tangents" , "boolean", 1, 0,
							"aiExportColors" , "Export Vertex Colors" , "boolean", 1, 0,
							"aiExportRefPoints" , "Export Reference Positions", "boolean", 1, 1,
							"aiExportRefNormals" , "Export Reference Normals", "boolean", 1, 0,
							"aiExportRefTangents" , "Export Reference Tangents", "boolean", 1,0
							};
											
string $aiSubdivisonAttributes[] = {
							"aiSubdivType" , "Type", "int", 1, 0,
							"aiSubdivIterations" , "Iterations" , "int", 1, 1,
							"aiSubdivSmoothDerivs" , "Smooth Tangents" , "boolean", 1,0
							};

string $aiDisplacementAttributes[] = {
							"aiDispHeight" , "Height" , "double", 1, 1.0,
							"aiDispPadding" , "Bounds Padding", "double", 1, 0.0,
							"aiDispZeroValue" , "Scalar Zero Value", "double", 1, 0.0,
							"aiDispAutobump" , "Auto Bump" , "boolean", 1, 0
							};
														
string $aiVolumeAttributes[] = {
							"aiStepSize" , "Step Size" , "double", 1,0.0,
							"aiVolumePadding" , "Volume Padding" , "double", 1,0.0
							};
											
string $extraAttributes[] = {
							"displayMapBorders" , "Display Map Borders" , "boolean", 1, 0,
							"displayColors" , "Display Colors" , "boolean", 1, 0,
							"displayBorders" , "Display Borders", "boolean", 1, 0,
							"displayImmediate" , "Display Immediate", "boolean", 1, 0,
							"displayVertices" , "Display Vertices", "boolean", 1, 0,
							"displayCenter" , "Display Center", "boolean", 1, 0,
							"displayTriangles" , "Display Triangles", "boolean", 1, 0,
							"displayUVs" , "Display UVs", "boolean", 1, 0,
							"displayNonPlanar" , "Display Non-Planar", "boolean", 1, 0,
							"displayInvisibleFaces" , "Display Invisible Faces", "boolean", 1, 0,
							"displayNormal" , "Display Normal", "boolean", 1, 0,
							"displayTangent" , "Display Tangent", "boolean", 1, 0,
							"normalSize" , "Normal Size", "double", 1,1.0,
							"normalType" , "Normal Type", "int", 1,1,
							"vertexSize" , "Vertex Size", "int", 1, 3
							};
switch($index)
{
	case 2:
		return $meshAttributes;
		break;
	case 3:
		return $aiExportAttributes;
		break;
	case 4:
		return $aiSubdivisonAttributes;
		break;
	case 5:
		return $aiDisplacementAttributes;
		break;
	case 6:
		return $aiVolumeAttributes;
		break;
	case 7:
		return $extraAttributes;
		break;
	default:
		return $aiMeshAttributes;
		break;
	}
}			

global proc genAttributeLayout(string $parentLayout,string $chooseIndex)
{
	string $modifyAttributes[] = chooseAttributes($chooseIndex);
	//if (`window -ex AiAttributesManager`)										
	//	deleteUI AiAttributesManager;
		
	//window -t "AiAttributesManager" -w 250 -h 600 AiAttributesManager;
	if(`frameLayout -q -ex AiAttributeLayout`)
		deleteUI AiAttributeLayout;

	frameLayout -l "Attribute Control" -w 486 -p $parentLayout AiAttributeLayout;
	formLayout AiAttrsMainLayout;
	for($i=0;$i<size($modifyAttributes);$i+=5)
	{
		int $switch = $modifyAttributes[$i+3];
		if($switch == 1)
		{
			string $controlTemps[] = controlCreator($modifyAttributes[$i+1],$modifyAttributes[$i+2],$modifyAttributes[$i+4],$modifyAttributes[$i]);
			//print ($controlTemps+"\n");
			if($controlTemps[1] == "floatSliderGrp" || $controlTemps[1] == "intSliderGrp")
			{formLayout -e -af $controlTemps[0] "left" 70 -af $controlTemps[0] "top" (($i+1)*4) AiAttrsMainLayout;}
			else
			{formLayout -e -af $controlTemps[0] "left" 150 -af $controlTemps[0] "top" (($i+1)*4) AiAttrsMainLayout;}
		}
			
	}		

	//showWindow AiAttributesManager;
}										
								

global proc string [] controlCreator(string $attributesName, string $attributesType, string $defaultValue,string $attrLongName)
{
	string $controlType,$controlName;
	switch ($attributesType)
	{
		case "boolean":
		{
			int $switch = $defaultValue;
			$controlName = `checkBox -l $attributesName -v $switch`;
			eval("checkBox -e -onc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," + "\\"+"\""+"1"+"\\"+"\") " + "\"" + $controlName);
			eval("checkBox -e -ofc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," + "\\"+"\""+"0"+"\\"+"\") " + "\"" + $controlName);
			$controlType = "checkBox";
			break;
		}
		case "double":
		{
			float $value = $defaultValue;
			$controlName = `floatSliderGrp -pre 5 -l $attributesName -v $value -field on`;
			string $editCommand = "`floatSliderGrp -q -v " + $controlName +"`";
			eval("floatSliderGrp -e -cc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "floatSliderGrp";
			break;
		}
		case "int":
		{
			int $value = $defaultValue;
			$controlName = `intSliderGrp -l $attributesName -v $value -field on`;
			string $editCommand = "`intSliderGrp -q -v " + $controlName +"`";
			eval("intSliderGrp -e -cc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "intSliderGrp";
			break;
		}
		case "string":
		{
			$controlName = `textFieldGrp -l $attributesName -tx $defaultValue`;
			string $editCommand = "`textFieldGrp -q -tx " + $controlName +"`";
			eval("textFieldGrp -e -tcc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "textFieldGrp";
			break;
		}
		default:
			return {""};
	}
	
	return {$controlName,$controlType};
}



global proc connectAttrs(string $attr,string $attrType,string $value)
{
	string $meshs[] = `ls -sl -r off -dag -s -ni -type "mesh"`;
	string $errorCatcher[];
	for($mesh in $meshs)
	{
		switch($attrType)
		{
			case "string":
			{
				if (catchQuiet(`setAttr -type "string" ($mesh+"."+$attr) $value`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "double":
			{
				float $fValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $fValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "int":
			{
				int $iValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $iValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "boolean":
			{
				int $bValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $bValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				//print ($mesh+"."+$attr);
				break;
			}
			default:
				break;
		}
	}
}



createAOVWindow();