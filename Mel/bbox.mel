global proc vector [] getBoundingBox(string $object[])
{
    vector $p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7;

    float $box[] = `xform -q -ws -bb $object`;

    $p0 = <<$box[0],$box[1],$box[5]>>;
    $p1 = <<$box[3],$box[1],$box[5]>>;
    $p2 = <<$box[0],$box[4],$box[5]>>;
    $p3 = <<$box[3],$box[4],$box[5]>>;
    $p4 = <<$box[0],$box[4],$box[2]>>;
    $p5 = <<$box[3],$box[4],$box[2]>>;
    $p6 = <<$box[0],$box[1],$box[2]>>;
    $p7 = <<$box[3],$box[1],$box[2]>>;
    vector $center = ($p0+$p1+$p2+$p3+$p4+$p5+$p6+$p7)/8.0;

    return {$p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7,$center};
}



global proc string genBoundingBoxMesh(string $objectName[])
{
    vector $pArray[] = getBoundingBox($objectName);
    string $bbox[] = `polyCube`; 
    vector $p0 = $pArray[0];
    vector $p1 = $pArray[1];
    vector $p2 = $pArray[2];
    vector $p3 = $pArray[3];
    vector $p4 = $pArray[4];
    vector $p5 = $pArray[5];
    vector $p6 = $pArray[6];
    vector $p7 = $pArray[7];

    move ($p0.x) ($p0.y) ($p0.z) ($bbox[0]+".vtx[0]");
    move ($p1.x) ($p1.y) ($p1.z) ($bbox[0]+".vtx[1]");
    move ($p2.x) ($p2.y) ($p2.z) ($bbox[0]+".vtx[2]");
    move ($p3.x) ($p3.y) ($p3.z) ($bbox[0]+".vtx[3]");
    move ($p4.x) ($p4.y) ($p4.z) ($bbox[0]+".vtx[4]");
    move ($p5.x) ($p5.y) ($p5.z) ($bbox[0]+".vtx[5]");
    move ($p6.x) ($p6.y) ($p6.z) ($bbox[0]+".vtx[6]");
    move ($p7.x) ($p7.y) ($p7.z) ($bbox[0]+".vtx[7]");
    return $bbox[0];
}

global proc sliceObject(string $objectName)
{

}

global proc int axisMeasure(string $objectName[])
{
    float $bbox[] = `xform -q -ws -bb $objectName`;

    float $x = abs($bbox[3] - $bbox[0]);
    float $y = abs($bbox[4] - $bbox[1]);
    float $z = abs($bbox[5] - $bbox[2]);

    float $index[] = {$x,$y,$z};
    float $sortIndex[] = {$x,$y,$z};
    $sortIndex = sort($sortIndex);
    int $maxLengthAxisIndex = floatArrayFind($sortIndex[2],0,$index);
    
    /*if($maxLengthAxisIndex == 0)
    {
        return {$bbox[0],$bbox[3]};
    }
    else if($maxLengthAxisIndex == 1)
    {
        return {$bbox[1],$bbox[4]};
    }
    else
    {
        return {$bbox[2],$bbox[5]};
    }*/
    return $maxLengthAxisIndex;
}

global proc string [] meshToVertex(string $meshName)
{
    string $vertexTemp[];
    if(`nodeType $meshName` == "mesh")
    {
        int $vNumbers[] = `polyEvaluate -v $meshName`;
        for($i=0;$i<$vNumbers[0];$i++)
        {
            $vertexTemp[size($vertexTemp)] = $meshName+".vtx["+$i+"]";
        }
    }
    else
    {

    }
    return $vertexTemp;
}

global proc singleAxisSlicer(string $objectName,int $sliceNumber)
{
    string $allVertex[] = meshToVertex($objectName);
    int $axis = axisMeasure($allVertex);
    float $bbox[] = `xform -q -ws -bb $allVertex`;
    float $min,$max;
    $min = $bbox[$axis];
    $max = $bbox[$axis+3];

    float $subLength = abs($max - $min) / $sliceNumber; 
    string $tempVertex[] = $allVertex;
    string $boxs[];
    for($i=0,$tempMin=$min,$tempMax=$min+$subLength;$i<$sliceNumber;$i++,$tempMin+=$subLength,$tempMax+=$subLength)
    {
        string $satVertex[];
        
        for($vtx in $tempVertex)
        {
            float $vtxPos[] = `xform -q -ws -t $vtx`;
            if($vtxPos[$axis] - $tempMin>0 && $vtxPos[$axis] - $tempMax<0)
            {
                $satVertex[size($satVertex)] = $vtx;
            }
            else
            {
                
            }
        }
        if(size($satVertex)>0)
        {
            $boxs[size($boxs)] = genBoundingBoxMesh($satVertex);
            $tempVertex = stringArrayRemove($satVertex,$tempVertex);
        }
    }
    if(size($boxs)>0)
    {
        for($box in $boxs)
        {
            vector $bbox[] = getBoundingBox(meshToVertex($box));
            vector $center = $bbox[8];
            string $locators[] = `spaceLocator`;
            move ($center.x) ($center.y) ($center.z) $locators[0];
        }
    }
}



string $obj[] = `ls -sl -dag -s`;

singleAxisSlicer($obj[0],20);

