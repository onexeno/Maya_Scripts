global proc string [] chooseAttributes(int $index)
{
string $meshAttributes[] = {
							"holdOut" , "Hold-Out" , "boolean", 0, 0,
							"smoothShading" , "Smooth Shading" , "boolean", 0, 0,
							"primaryVisibility" , "Primary Visibility" , "boolean", 1, 1,
							"castsShadows" , "Casts Shadows" , "boolean", 1, 1,
							"receiveShadows" , "Receive Shadows" , "boolean", 1, 1,
							"motionBlur" , "Motion Blur" , "boolean", 1, 1,
							"visibleInReflections" , "Visible In Reflection" , "boolean", 1, 1,
							"visibleInRefractions" , "Visbile In Refraction", "boolean", 1, 1,
							"doubleSided" , "Double Sided" , "boolean", 1, 1,
							"opposite" , "Opposite" , "boolean", 1,0
							};
										
string $aiMeshAttributes[] = {
							"aiOpaque"  , "Opaque" , "boolean", 1, 1,
							"aiMatte" , "Matte" ,"boolean", 1, 0,
							"primaryVisibility" , "Primary Visibility" , "boolean", 1, 1,
							"castsShadows" , "Casts Shadows" ,"boolean", 1, 1,
							"aiVisibleInDiffuseReflection" , "Diffuse Reflection" , "boolean", 1, 1,
							"aiVisibleInSpecularReflection" , "Specular Reflection" , "boolean", 1, 1,
							"aiVisibleInDiffuseTransmission" , "Diffuse Transmission" , "boolean", 1, 1,
							"aiVisibleInSpecularTransmission" , "Specular Transmission" , "boolean", 1, 1,
							"aiVisibleInVolume" , "Volume" , "boolean", 0, 0,
							"aiSelfShadows" , "Self Shadows" , "boolean", 1,1
							};

string $aiExportAttributes[] = {
							"aiExportTangents" , "Export Tangents" , "boolean", 1, 0,
							"aiExportColors" , "Export Vertex Colors" , "boolean", 1, 0,
							"aiExportRefPoints" , "Export Reference Positions", "boolean", 1, 1,
							"aiExportRefNormals" , "Export Reference Normals", "boolean", 1, 0,
							"aiExportRefTangents" , "Export Reference Tangents", "boolean", 1,0
							};
											
string $aiSubdivisonAttributes[] = {
							"aiSubdivType" , "Type", "int", 1, 0,
							"aiSubdivIterations" , "Iterations" , "int", 1, 1,
							"aiSubdivSmoothDerivs" , "Smooth Tangents" , "boolean", 1,0
							};

string $aiDisplacementAttributes[] = {
							"aiDispHeight" , "Height" , "double", 1, 1.0,
							"aiDispPadding" , "Bounds Padding", "double", 1, 0.0,
							"aiDispZeroValue" , "Scalar Zero Value", "double", 1, 0.0,
							"aiDispAutobump" , "Auto Bump" , "boolean", 1, 0
							};
														
string $aiVolumeAttributes[] = {
							"aiStepSize" , "Step Size" , "double", 1,0.0,
							"aiVolumePadding" , "Volume Padding" , "double", 1,0.0
							};
											
string $extraAttributes[] = {
							"displayMapBorders" , "Display Map Borders" , "boolean", 1, 0,
							"displayColors" , "Display Colors" , "boolean", 1, 0,
							"displayBorders" , "Display Borders", "boolean", 1, 0,
							"displayImmediate" , "Display Immediate", "boolean", 1, 0,
							"displayVertices" , "Display Vertices", "boolean", 1, 0,
							"displayCenter" , "Display Center", "boolean", 1, 0,
							"displayTriangles" , "Display Triangles", "boolean", 1, 0,
							"displayUVs" , "Display UVs", "boolean", 1, 0,
							"displayNonPlanar" , "Display Non-Planar", "boolean", 1, 0,
							"displayInvisibleFaces" , "Display Invisible Faces", "boolean", 1, 0,
							"displayNormal" , "Display Normal", "boolean", 1, 0,
							"displayTangent" , "Display Tangent", "boolean", 1, 0,
							"normalSize" , "Normal Size", "double", 1,1.0,
							"normalType" , "Normal Type", "int", 1,1,
							"vertexSize" , "Vertex Size", "int", 1, 3
							};
	switch($index)
	{
		case 1:
			return $meshAttributes;
			break;
		case 2:
			return aiMeshAttributes;
			break;
		case 3:
			return $aiExportAttributes;
			break;
		case 4:
			return $aiSubdivisonAttributes;
			break;
		case 5:
			return $aiDisplacementAttributes;
			break;
		case 6:
			return $aiVolumeAttributes;
			break;
		case 7:
			return $extraAttributes;
			break;
		default:
			return $aiMeshAttributes;
			break;
	}
}			

global proc genAttributeLayout(string $parentLayout,string $chooseIndex)
{
	string $modifyAttributes[] = chooseAttributes();
	//if (`window -ex AiAttributesManager`)										
	//	deleteUI AiAttributesManager;
		
	//window -t "AiAttributesManager" -w 250 -h 600 AiAttributesManager;
	frameLayout -l "Attribute Control" -parentLayout;
	formLayout AiAttrsMainLayout;
	for($i=0;$i<size($modifyAttributes);$i+=5)
	{
		int $switch = $modifyAttributes[$i+3];
		if($switch == 1)
		{
			string $controlTemps[] = controlCreator($modifyAttributes[$i+1],$modifyAttributes[$i+2],$modifyAttributes[$i+4],$modifyAttributes[$i]);
			//print ($controlTemps+"\n");
			if($controlTemps[1] == "floatSliderGrp" || $controlTemps[1] == "intSliderGrp")
			{formLayout -e -af $controlTemps[0] "left" 70 -af $controlTemps[0] "top" (($i+1)*4) AiAttrsMainLayout;}
			else
			{formLayout -e -af $controlTemps[0] "left" 150 -af $controlTemps[0] "top" (($i+1)*4) AiAttrsMainLayout;}
		}
			
	}		

	//showWindow AiAttributesManager;
}										
								

global proc string [] controlCreator(string $attributesName, string $attributesType, string $defaultValue,string $attrLongName)
{
	string $controlType,$controlName;
	switch ($attributesType)
	{
		case "boolean":
		{
			int $switch = $defaultValue;
			$controlName = `checkBox -l $attributesName -v $switch`;
			eval("checkBox -e -onc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," + "\\"+"\""+"1"+"\\"+"\") " + "\"" + $controlName);
			eval("checkBox -e -ofc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," + "\\"+"\""+"0"+"\\"+"\") " + "\"" + $controlName);
			$controlType = "checkBox";
			break;
		}
		case "double":
		{
			float $value = $defaultValue;
			$controlName = `floatSliderGrp -l $attributesName -v $value -field on`;
			string $editCommand = "`floatSliderGrp -q -v " + $controlName +"`";
			eval("floatSliderGrp -e -cc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "floatSliderGrp";
			break;
		}
		case "int":
		{
			int $value = $defaultValue;
			$controlName = `intSliderGrp -l $attributesName -v $value -field on`;
			string $editCommand = "`intSliderGrp -q -v " + $controlName +"`";
			eval("intSliderGrp -e -cc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "intSliderGrp";
			break;
		}
		case "string":
		{
			$controlName = `textFieldGrp -l $attributesName -tx $defaultValue`;
			string $editCommand = "`textFieldGrp -q -tx " + $controlName +"`";
			eval("textFieldGrp -e -tcc " + "\"" + "connectAttrs(" + "\\" + "\"" + $attrLongName + "\\"+"\","  + "\\" + "\"" + $attributesType +"\\"+ "\"," +$editCommand+") " + "\"" + $controlName);
			$controlType = "textFieldGrp";
			break;
		}
		default:
			return {""};
	}
	
	return {$controlName,$controlType};
}



global proc connectAttrs(string $attr,string $attrType,string $value)
{
	string $meshs[] = `ls -sl -r off -dag -s -ni -type "mesh"`;
	string $errorCatcher[];
	for($mesh in $meshs)
	{
		switch($attrType)
		{
			case "string":
			{
				if (catchQuiet(`setAttr -type "string" ($mesh+"."+$attr) $value`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "double":
			{
				float $fValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $fValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "int":
			{
				int $iValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $iValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				break;
			}
			case "boolean":
			{
				int $bValue = $value;
				if (catchQuiet(`setAttr ($mesh+"."+$attr) $bValue`))
				{
					$errorCatcher[size($errorCatcher)] = $mesh;
				}
				//print ($mesh+"."+$attr);
				break;
			}
			default:
				break;
		}
	}
}

